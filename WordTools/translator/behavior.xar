<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Python Script" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="266" y="66"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import qi
import sys
sys.path.append("/data/home/nao/.local/share/PackageManager/apps/wordtools/libs")
from naoqi import ALProxy
import os
import re
from mtranslate import translate
import ssl
import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy("ALMemory")
        self.tts = ALProxy("ALTextToSpeech")
        self.animated_speech = ALProxy("ALAnimatedSpeech")
        self.voice_speed = "\\RSPD=85\\"
        self.configuration = {"bodyLanguageMode": "contextual"}

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # ssl._create_default_https_context = ssl._create_unverified_context
        installed_languages = self.tts.getAvailableLanguages()
        available_languages = ['Arabic', 'Brazilian', 'Chinese', 'Czech', 'Danish', 'Dutch', 'English', 'Finnish', 'French', 'German', 'Greek', 'Italian', 'Japanese', 'Korean', 'Norwegian', 'Polish', 'Portuguese','Russian',  'Spanish', 'Swedish', 'Turkish']
        self.logger.info(str(installed_languages))

        to_translate = str(self.memory.getData("CARESSES/translate_text"))
        dest_language = str(self.memory.getData("CARESSES/translate_lan"))
        dest_language = dest_language.capitalize()

        if dest_language not in installed_languages:
            if dest_language in available_languages:
                self.animated_speech.say(self.voice_speed + "I'm sorry, " + dest_language + " language is not installed.", self.configuration)
            else:
                self.animated_speech.say(self.voice_speed + "I'm sorry, I can't speak " + dest_language, self.configuration)
        else:
            languages_mapping = {'Arabic': 'ar', 'Brazilian': '-', 'Chinese': 'zh-TW', 'Czech': 'cs', 'Danish': 'da',
                                 'Dutch': 'nl', 'English': 'en', 'Finnish': 'fi', 'French': 'fr', 'German': 'de',
                                 'Greek': 'el', 'Italian': 'it', 'Japanese': 'ja', 'Korean': 'ko', 'Norwegian': 'no',
                                 'Polish': 'pl', 'Portuguese': 'pt', 'Russian': 'ru', 'Spanish': 'es', 'Swedish': 'sv',
                                 'Turkish': 'tr'}
            if languages_mapping[dest_language] == '-':
                self.animated_speech.say(self.voice_speed + "I'm sorry I can't translate in " + dest_language, self.configuration)
            else:
                self.animated_speech.say(self.voice_speed + "The " + dest_language + " for " + to_translate + " is: ")
                self.tts.setLanguage(dest_language)
                self.tts.setParameter("speed", 85)
                translation = str(translate(to_translate, languages_mapping[dest_language]))
                self.logger.info(translation)
                self.tts.say(translate.encode('utf-8'))
                self.tts.setLanguage("English")

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>