<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Python Script" id="1" localization="8" tooltip="This box contains a basic python script and can be used to create any python script box you would like.&#x0A;&#x0A;To edit its script, double-click on it." x="263" y="68"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[sys.path.append("/data/home/nao/.local/share/PackageManager/apps/movement/libs/")
import qi
import sys
from naoqi import ALProxy
import os
import re

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy("ALMemory")
        self.motion = ALProxy("ALMotion")
        self.animated_speech = ALProxy("ALAnimatedSpeech")
        self.voice_speed = "\\RSPD=85\\"
        self.configuration = {"bodyLanguageMode": "contextual"}

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # Get the name of place the user wants to add
        where = str(self.memory.getData("CARESSES/learn_place"))
        odometry = self.motion.getRobotPosition(True)
        Px_r = round(odometry[0], 2)
        Py_r = round(odometry[1], 2)
        Ptheta_r = round(odometry[2], 2)
        P_r = [Px_r, Py_r, 1.0]

        # Check if the transformation exists
        try:
            # If the transformation exists, the position should be computed wrt to the enviromnent
            transformation_matrix = self.memory.getData("CARESSES/transformation_matrix")
            theta = self.memory.getData("CARESSES/theta")
            Pr_w = np.dot(transformation_matrix, np.array([P_r]).T)
            Pr_w = [round(Pr_w[0], 2), round(Pr_w[1], 2), 1.0, round(Ptheta_r + theta, 2)]
            self.logger.info("Position of the robot wrt the world:" + str(Pr_w))
            with open("/data/home/nao/.local/share/PackageManager/apps/movement/map.txt", 'a') as f:
                    f.write('\n' + where + "_" + str(Pr_w[0]) + '_' + str(Pr_w[1]) + '_' + str(Pr_w[3]))

            self.animated_speech.say(self.voice_speed + "Now I now that this place is the " + str(where) +  ".", self.configuration)

        # If the transformation matrix does not exist in the memory, it means the robot does not know its position
        except:
            # Check if the file is empty:
            if os.stat("/data/home/nao/.local/share/PackageManager/apps/movement/map.txt").st_size == 0:
                # If it's empty, store the current position with respect to the robot's odometry
                with open("/data/home/nao/.local/share/PackageManager/apps/movement/map.txt", 'a') as f:
                    f.write('\n' + where + "_" + str(Px_r) + '_' + str(Py_r) + '_' + str(Ptheta_r))

                theta = 0
                transformation_matrix = np.array([[np.cos(theta), -np.sin(theta), 0],
                                              [np.sin(theta), np.cos(theta), 0],
                                              [0, 0, 1]])
                self.logger.info("Transformation matrix:" + str(transformation_matrix))
                self.memory.insertData("CARESSES/transformation_matrix", transformation_matrix.tolist())
                self.memory.insertData("CARESSES/theta", theta)

                self.animated_speech.say(self.voice_speed + "This is the first place of the map. Now I know that this is the " + str(where) +  ".", self.configuration)

            # If the file is not empty, but the robot does not know the transformation, it can't learn the new place
            else:
                self.animated_speech.say(self.voice_speed + "The map is not empty, but I don't know where I am. Please, bring me to a known position before telling me to add a new place.", self.configuration)

        self.onInput_onStop()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>