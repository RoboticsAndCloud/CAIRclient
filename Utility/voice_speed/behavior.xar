<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Voice Speed" id="1" localization="8" tooltip="This box contains a Python script that allows to change the speed with which the robot talks on the basis of the user&apos;s request." x="191" y="69"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy("ALMemory")
        self.tts = ALProxy("ALTextToSpeech")
        self.animated_speech = ALProxy("ALAnimatedSpeech")
        try:
            self.voice_speed = "\\RSPD=" + str(self.memory.getData("CAIR/voice_speed")) + "\\"
        except:
            self.voice_speed = "\\RSPD=80\\"
        self.configuration = {"bodyLanguageMode": "contextual"}

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        level = self.memory.getData("CAIR/voice_speed_level")
        previous_speed = self.memory.getData("CAIR/voice_speed")
        self.logger.info(previous_speed)

        if level == "faster":
            if previous_speed == 100:
                self.animated_speech.say(self.voice_speed + "Sorry, I can't speak faster than this.", self.configuration)
            else:
                new_speed = previous_speed + 10
                if new_speed > 100:
                    new_speed = 100
                    self.logger.info(str(new_speed))
                self.voice_speed = "\\RSPD=" + str(new_speed) + "\\"
                self.animated_speech.say(self.voice_speed + "I increased my voice speed.", self.configuration)
        elif level == "slower":
            if previous_speed == 50:
                self.animated_speech.say(self.voice_speed + "Sorry, I can't speak slower than this.", self.configuration)
            else:
                new_speed = previous_speed - 10
                if new_speed < 50:
                    new_speed = 50
                    self.logger.info(str(new_speed))
                self.voice_speed = "\\RSPD=" + str(new_speed) + "\\"
                self.animated_speech.say(self.voice_speed + "I decreased my voice speed.", self.configuration)
        elif level == "high":
            if previous_speed == 100:
                self.animated_speech.say(self.voice_speed + "My voice speed is already set to high.", self.configuration)
            else:
                new_speed = 100
                self.logger.info(str(new_speed))
                self.voice_speed = "\\RSPD=100\\"
                self.animated_speech.say(self.voice_speed + "My voice speed is now set to high.", self.configuration)
        elif level == "normal":
            if previous_speed == 70:
                self.animated_speech.say(self.voice_speed + "My voice speed is already set to normal.", self.configuration)
            else:
                new_speed = 70
                self.logger.info(str(new_speed))
                self.voice_speed = "\\RSPD=70\\"
                self.animated_speech.say(self.voice_speed + "My voice speed is now set to normal.", self.configuration)
        elif level == "low":
            if previous_speed == 60:
                self.animated_speech.say(self.voice_speed + "My voice speed is already set to low.", self.configuration)
            else:
                new_speed = 60
                self.logger.info(str(new_speed))
                self.voice_speed = "\\RSPD=60\\"
                self.animated_speech.say(self.voice_speed + "My voice speed is now set to low.", self.configuration)
        else:
            self.tts.say("I'm sorry, I can't set my voice speed to " + str(level) + " .")

        self.memory.insertData("CAIR/voice_speed", new_speed)
        self.onInput_onStop()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>